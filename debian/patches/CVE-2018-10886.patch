Description: CVE-2018-10886
 unzip and untar targets allows the extraction of files outside the target 
 directory. A crafted zip or tar file submitted to an Ant build could create or 
 overwrite arbitrary files with the privileges of the user running Ant.
 
Author: Abhijith PA <abhijith@disroot.org>
Origin: https://github.com/apache/ant/commit/e56e54565804991c62ec76dad385d2bdda8972a7
        https://github.com/apache/ant/commit/1a2b1e37e3616991588f21efa89c474dd6ff83ff
        https://github.com/apache/ant/commit/f72406d53cfb3b3425cc9d000eea421a0e05d8fe
        https://github.com/apache/ant/commit/857095da5153fd18504b46f276d84f1e76a66970
Last-Update: 2018-07-18

Index: ant-1.9.4/manual/Tasks/unzip.html
===================================================================
--- ant-1.9.4.orig/manual/Tasks/unzip.html
+++ ant-1.9.4/manual/Tasks/unzip.html
@@ -125,8 +125,9 @@ archive.</p>
       Note that this changes the entry's name before applying
       include/exclude patterns and before using the nested mappers (if
       any).  <em>since Ant 1.8.0</em></td>
-    <td valign="top" align="center">No, defaults to false</td>
-  </tr>
+    <td valign="top" align="center">No, defaults to true <em>since 1.9.4-3+deb8u1</em>
+      (used to default to false prior to that)</td>
+</tr>
   <tr>
     <td valign="top">scanForUnicodeExtraFields</td>
     <td valign="top"><b>Note:</b> This attribute is not available for
@@ -137,6 +138,15 @@ archive.</p>
       zip task page</a></td>
     <td align="center" valign="top">No, defaults to true</td>
   </tr>
+  <tr>
+    <td valign="top">allowFilesToEscapeDest</td>
+    <td valign="top">Whether to allow the extracted file or directory
+      to be outside of the dest directory.
+      <em>since Ant 1.9.4-3+deb8u1</em></td>
+    <td valign="top" align="center">No, defaults to false unless
+    stripAbsolutePathSpec is true and the entry's name starts with a leading
+    path spec.</td>
+  </tr>
 </table>
 <h3>Examples</h3>
 <pre>
Index: ant-1.9.4/src/main/org/apache/tools/ant/taskdefs/Expand.java
===================================================================
--- ant-1.9.4.orig/src/main/org/apache/tools/ant/taskdefs/Expand.java
+++ ant-1.9.4/src/main/org/apache/tools/ant/taskdefs/Expand.java
@@ -67,8 +67,9 @@ public class Expand extends Task {
     private Union resources = new Union();
     private boolean resourcesSpecified = false;
     private boolean failOnEmptyArchive = false;
-    private boolean stripAbsolutePathSpec = false;
+    private boolean stripAbsolutePathSpec = true;
     private boolean scanForUnicodeExtraFields = true;
+    private Boolean allowFilesToEscapeDest = null;
 
     public static final String NATIVE_ENCODING = "native-encoding";
 
@@ -240,14 +241,17 @@ public class Expand extends Task {
                                boolean isDirectory, FileNameMapper mapper)
                                throws IOException {
 
-        if (stripAbsolutePathSpec && entryName.length() > 0
+        final boolean entryNameStartsWithPathSpec = entryName.length() > 0
             && (entryName.charAt(0) == File.separatorChar
                 || entryName.charAt(0) == '/'
-                || entryName.charAt(0) == '\\')) {
+                || entryName.charAt(0) == '\\');
+        if (stripAbsolutePathSpec && entryNameStartsWithPathSpec) {
             log("stripped absolute path spec from " + entryName,
                 Project.MSG_VERBOSE);
             entryName = entryName.substring(1);
         }
+        boolean allowedOutsideOfDest = Boolean.TRUE == getAllowFilesToEscapeDest()
+            || null == getAllowFilesToEscapeDest() && !stripAbsolutePathSpec && entryNameStartsWithPathSpec;
 
         if (patternsets != null && patternsets.size() > 0) {
             String name = entryName.replace('/', File.separatorChar)
@@ -313,6 +317,12 @@ public class Expand extends Task {
             mappedNames = new String[] {entryName};
         }
         File f = fileUtils.resolveFile(dir, mappedNames[0]);
+        if (!allowedOutsideOfDest && !fileUtils.isLeadingPath(dir, f)) {
+            log("skipping " + entryName + " as its target " + f + " is outside of "
+                + dir + ".", Project.MSG_VERBOSE);
+                return;
+        }
+
         try {
             if (!overwrite && f.exists()
                 && f.lastModified() >= entryDate.getTime()) {
@@ -508,4 +518,25 @@ public class Expand extends Task {
         return scanForUnicodeExtraFields;
     }
 
+    /**
+     * Whether to allow the extracted file or directory to be outside of the dest directory.
+     *
+     * @param b the flag
+     * @since Ant 1.9.4-3+deb8u1
+     */
+    public void setAllowFilesToEscapeDest(boolean b) {
+        allowFilesToEscapeDest = b;
+    }
+
+    /**
+     * Whether to allow the extracted file or directory to be outside of the dest directory.
+     *
+     * @return {@code null} if the flag hasn't been set explicitly,
+     * otherwise the value set by the user.
+     * @since Ant 1.9.4-3+deb8u1
+     */
+    public Boolean getAllowFilesToEscapeDest() {
+        return allowFilesToEscapeDest;
+    }
+
 }
